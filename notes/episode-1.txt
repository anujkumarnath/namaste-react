1. Take notes
2. Pause and try to redo what he does
3. Maintain a github repo
--------------------------------------------------
1. We can use JS to push an element to the dom.
2. We can use cdn links to include react in our project
3. including the two scripts give us react in the browser
4. We can write React in the console and see it's there
5. Why there are two files?
-> The first file is the core of react and the second one is to manipulate the DOM.
React runs of multiple platforms or devices. For mobile, we have react native where the core react is the same but the second file is different. Similarly there are other options available for the second script for different usecases, but the core remains the same
6. We can also use the second file by typing ReactDOM on the console
7. Why is crossorigin is specified in the script tag?
-> The servers serving the HTML file and the react files are different, so by trying to access the react files (resources) in our HTML file, we are doing a cross-origin request to the CDN server. Browsers stop such request by default for security reasons, we have to use the keyword crossorigin to specify the browser that we trust the remote site and to allow crossorigin request.
---------------------------------------------------------------------------------------------
1. React needs a root where we can put elements
2. We create elements using React.createElement("html tag", {}, "The content that goes into the tag");
e.g., React.createElement("h1", {}, "Hello World from React!");

3. Creating an element is the core job of react, so we use 'React' but creating the root and adding items to it is the part of dom manipulation, so we use 'ReactDOM'
---------------------------------------------------------------------------------------------
1. Most resource intensive task for a browser to do is to manipulate DOM - putting some element inside dom, removing or updating them.
2. All frontend libraries like React are trying to optimize this operation and reduce the costly operations performed by the browser
3. React has the philosophy that whatever you do in a web page, do it using JavaScript and so it provides helper functions to do so in a very performant way
4. Till this point whatever HTML we have written is all that we need. From now on any operation we will do, like adding and HTML element, we will use React/JavaScript